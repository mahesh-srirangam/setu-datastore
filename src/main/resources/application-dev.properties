server.port=8081
logging.level.root=INFO

#Defaults to 60 is set to 0 for dev env only for those who don't have kafka locally 
app.kafka.max-block.seconds=1

#spring.jpa.hibernate.ddl-auto = update
quarkus.hibernate-orm.log.sql=true

app.dbName=quarkus
app.schemaName=fareye_schema
management.endpoints.web.exposure.include=*

#Properties releated to Security Config that can be changed as per your needs
fareye.auth.default.user=fareye_admin
fareye.auth.default.password={noop}fareye@!@#$%
fareye.auth.default.authority=VARIABLE_READ,VARIABLE_CREATE,VARIABLE_UPDATE,VARIABLE_DELETE

logging.level.org.apache.kafka=OFF




# Configuring the outgoing channel (writing to Kafka)
#mp.messaging.outgoing.traffic-log.connector=smallrye-kafka
mp.messaging.outgoing.traffic-log.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.traffic-log.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
#mp.messaging.outgoing.email.connector=smallrye-kafka
mp.messaging.outgoing.email.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.email.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
#mp.messaging.outgoing.test.bootstrap.servers=kafka:9092
#mp.messaging.outgoing.test.connector=smallrye-kafka
mp.messaging.outgoing.test.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.test.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer


# Configuring the incoming channel (reading from Kafka)
mp.messaging.incoming.accounts-in.connector=smallrye-kafka
mp.messaging.incoming.accounts-in.partitions=1
mp.messaging.incoming.accounts-in.group.id=1
mp.messaging.incoming.accounts-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# mp.messaging.incoming.accounts-in.value.deserializer=com.ardab.quarkus.consumer.model.AccountDeserializer
mp.messaging.incoming.accounts-in.auto.offset.reset=earliest
