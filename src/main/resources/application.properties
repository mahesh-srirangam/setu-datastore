#
# /*
#  * *
#  *  * ****************************************************************************
#  *  *
#  *  * Copyright (c) 2023, FarEye and/or its affiliates. All rights
#  *  * reserved.
#  *  * ___________________________________________________________________________________
#  *  *
#  *  *
#  *  * NOTICE: All information contained herein is, and remains the property of
#  *  * FaEye and its suppliers,if any. The intellectual and technical concepts
#  *  * contained herein are proprietary to FarEye. and its suppliers and
#  *  * may be covered by us and Foreign Patents, patents in process, and are
#  *  * protected by trade secret or copyright law. Dissemination of this information
#  *  * or reproduction of this material is strictly forbidden unless prior written
#  *  * permission is obtained from FarEye
#  *
#  */
#
#redis,postgres,kafka,rabbitmq,s3,app-master,jaeger
quarkus.application.name= ${CONFIG_NAME}
quarkus.spring-cloud-config.enabled=true
# configure the URL where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default
quarkus.spring-cloud-config.url= ${CONFIG_URI}
quarkus.spring-cloud-config.label= ${CONFIG_LABEL}
quarkus.spring-cloud-config.headers.Authorization=Bearer ${CONFIG_ACCESS_TOKEN}

#Enable Features
enable.db=true
enable.kafka=true
enable.rabbitMq=false
enable.aws=false
enable.sftp=true
enable.throttle=true
enable.service.soap=false
enable.service.rest=true
opentracing.jaeger.enabled=true

#Whitelist URL's for Public access, no auth to be applied on the below comma separated urls
fareye.auth.whitelist.url=/, /public/**

#quarkus.package.type=uber-jar

kafka.bootstrap.servers=${kafka.bootstrap.servers}
# quarkus.datasource.jdbc.url=jdbc:postgresql://${datasource.host}:${datasource.port}/${app.dbName}
#postgresql://${datasource.host}:5432/${DB_NAME}
quarkus.datasource.reactive.url = postgresql://${datasource.host}/${DB_NAME}
#quarkus.datasource.username=postgres
#quarkus.datasource.password=postgres
quarkus.hibernate-orm.physical-naming-strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
run.flyway.migrate-at-start=true
quarkus.datasource.jdbc=false
#redis://[:password@]host[:port][/db-number]
quarkus.redis.hosts=${redis.host}
quarkus.redis.password=${redis.password}

# Configuring the outgoing channel (writing to Kafka)
mp.messaging.outgoing.traffic-log.connector=smallrye-kafka
mp.messaging.outgoing.traffic-log.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.traffic-log.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.email.connector=smallrye-kafka
mp.messaging.outgoing.email.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.email.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer



# Configuring the incoming channel (reading from Kafka)
mp.messaging.incoming.accounts-in.connector=smallrye-kafka
mp.messaging.incoming.accounts-in.partitions=1
mp.messaging.incoming.accounts-in.group.id=1
mp.messaging.incoming.accounts-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# mp.messaging.incoming.accounts-in.value.deserializer=com.ardab.quarkus.consumer.model.AccountDeserializer
mp.messaging.incoming.accounts-in.auto.offset.reset=earliest

email.topic=test
encrypt.key=test
traffic.log.topic=test